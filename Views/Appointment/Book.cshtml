@model AppointmentViewModel
@{
    ViewData["Title"] = "Randevu Al";
    var today = DateTime.Now;
    var currentMonth = today.ToString("MMMM yyyy", new System.Globalization.CultureInfo("tr-TR"));
}

<div class="container py-5">
    <div class="row">
        <!-- Sol Taraf - Doktor Bilgileri -->
        <div class="col-md-4 mb-4">
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center">
                    <img src="@(Model.Doctor?.ImageUrl)" alt="@(Model.Doctor?.Name)" 
                         class="rounded-circle mb-3" 
                         style="width: 120px; height: 120px; object-fit: cover;">
                    <h4 class="mb-2">@(Model.Doctor?.Name)</h4>
                    <p class="text-muted">@(Model.Doctor?.Specialty)</p>
                    <hr>
                    <div class="text-start">
                        <h6 class="mb-3"><i class="fas fa-clock me-2"></i>Çalışma Saatleri</h6>
                        <div class="mb-2 d-flex justify-content-between">
                            <span>Pazartesi - Cuma</span>
                            <span class="text-primary">09:00 - 17:00</span>
                                </div>
                        <div class="d-flex justify-content-between">
                            <span>Cumartesi - Pazar</span>
                            <span class="text-danger">Kapalı</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

        <!-- Sağ Taraf - Randevu Formu -->
        <div class="col-md-8">
            <div class="card border-0 shadow-sm">
                                <div class="card-body p-4">
                    <h4 class="mb-4">Randevu Bilgileri</h4>
                    <form asp-action="Create" method="post" id="appointmentForm">
                        <input type="hidden" asp-for="Appointment.DoctorId" value="@(Model.Doctor?.Id)" />
                        <input type="hidden" name="Appointment.AppointmentDateTime" id="selectedDateTime" />

                        <!-- Takvim -->
                        <div class="mb-4">
                            <label class="form-label">Randevu Tarihi</label>
                            <div class="simple-calendar bg-white border rounded p-3">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <button type="button" class="btn btn-sm btn-light" id="prevMonth">
                                        <i class="fas fa-chevron-left"></i>
                                    </button>
                                    <h6 class="mb-0" id="currentMonthYear">@currentMonth</h6>
                                    <button type="button" class="btn btn-sm btn-light" id="nextMonth">
                                        <i class="fas fa-chevron-right"></i>
                                    </button>
                                </div>
                                <table class="table table-calendar mb-0">
                                    <thead>
                                        <tr>
                                            <th>Pt</th>
                                            <th>Sa</th>
                                            <th>Ça</th>
                                            <th>Pe</th>
                                            <th>Cu</th>
                                            <th>Ct</th>
                                            <th>Pa</th>
                                        </tr>
                                    </thead>
                                    <tbody id="calendarDays"></tbody>
                                </table>
                            </div>
                        </div>
                        
                        <!-- Saat Seçimi -->
                        <div class="mb-4">
                            <label class="form-label">Randevu Saati</label>
                            <div class="time-slots d-flex flex-wrap gap-2" id="timeSlots"></div>
                        </div>
                        
                                <div class="col-12">
                            <button type="submit" class="btn btn-primary w-100" id="submitButton" disabled>
                            <i class="fas fa-calendar-check me-2"></i>Randevu Oluştur
                        </button>
                            </div>
                    </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

<style>
.table-calendar {
    table-layout: fixed;
}

.table-calendar th {
    text-align: center;
    font-weight: 500;
    color: #666;
    font-size: 14px;
    padding: 5px;
}

.table-calendar td {
    padding: 5px;
    text-align: center;
    vertical-align: middle;
    height: 40px;
}

.calendar-day {
    display: inline-block;
    width: 32px;
    height: 32px;
    line-height: 32px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s;
    font-size: 14px;
}

.calendar-day:not(.disabled):hover {
    background-color: #e9ecef;
}

.calendar-day.selected {
    background-color: var(--bs-primary);
    color: white;
}

.calendar-day.disabled {
    color: #ccc;
    cursor: not-allowed;
}

.calendar-day.today {
    border: 2px solid var(--bs-primary);
}

.time-slot {
    padding: 8px 16px;
    border: 1px solid #dee2e6;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.2s;
    font-size: 14px;
}

.time-slot:not(.disabled):hover {
    border-color: var(--bs-primary);
    background-color: #e9ecef;
}

.time-slot.selected {
    background-color: var(--bs-primary);
    color: white;
    border-color: var(--bs-primary);
}

.time-slot.disabled {
    opacity: 0.5;
    cursor: not-allowed;
}
</style>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
    let currentDate = new Date();
    let selectedDate = null;
    let selectedTime = null;
    const submitButton = document.getElementById('submitButton');
    const calendarDays = document.getElementById('calendarDays');
    const timeSlots = document.getElementById('timeSlots');
    const currentMonthYear = document.getElementById('currentMonthYear');
    const selectedDateTime = document.getElementById('selectedDateTime');
    const appointmentForm = document.getElementById('appointmentForm');

    // Form submit işlemi
    appointmentForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (!selectedDate || !selectedTime) {
            alert('Lütfen tarih ve saat seçiniz.');
            return;
        }

        // Seçilen tarih ve saati birleştir
        const [hours, minutes] = selectedTime.split(':');
        const appointmentDateTime = new Date(selectedDate);
        appointmentDateTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);
        
        // Hidden input'a değeri set et
        selectedDateTime.value = appointmentDateTime.toISOString();

        // Form verilerini topla
        const formData = new FormData(this);

        // Anti-forgery token'ı al
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        
        // AJAX isteği gönder
        fetch('/Appointment/Create', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': token
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(data.message);
                location.reload();
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Hata:', error);
            alert('Bir hata oluştu. Lütfen tekrar deneyin.');
        });
    });

    function updateCalendar() {
        const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
        const startingDay = (firstDay.getDay() + 6) % 7; // Pazartesi = 0
        
        currentMonthYear.textContent = currentDate.toLocaleString('tr-TR', { month: 'long', year: 'numeric' });
        calendarDays.innerHTML = '';

        let currentRow = document.createElement('tr');
                
        // Önceki ayın günleri
        for (let i = 0; i < startingDay; i++) {
            const prevDate = new Date(firstDay);
            prevDate.setDate(prevDate.getDate() - (startingDay - i));
            const td = createDayCell(prevDate, true);
            currentRow.appendChild(td);
        }

        // Bu ayın günleri
        for (let i = 1; i <= lastDay.getDate(); i++) {
            if ((i + startingDay - 1) % 7 === 0 && i !== 1) {
                calendarDays.appendChild(currentRow);
                currentRow = document.createElement('tr');
            }

            const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);
            const td = createDayCell(date);
            currentRow.appendChild(td);
        }

        // Sonraki ayın günleri
        const remainingCells = 7 - currentRow.children.length;
        if (remainingCells < 7) {
            for (let i = 1; i <= remainingCells; i++) {
                const nextDate = new Date(lastDay);
                nextDate.setDate(nextDate.getDate() + i);
                const td = createDayCell(nextDate, true);
                currentRow.appendChild(td);
            }
        }

        calendarDays.appendChild(currentRow);
    }

    function createDayCell(date, isOtherMonth = false) {
        const td = document.createElement('td');
        const dayDiv = document.createElement('div');
        dayDiv.className = 'calendar-day';
        dayDiv.textContent = date.getDate();
        
        const isWeekend = date.getDay() === 0 || date.getDay() === 6;
        const isPast = date < new Date().setHours(0,0,0,0);
        const isToday = date.toDateString() === new Date().toDateString();
        const isSelected = selectedDate?.toDateString() === date.toDateString();

        if (isOtherMonth || isWeekend || isPast) {
            dayDiv.classList.add('disabled');
        } else {
            dayDiv.addEventListener('click', () => selectDate(date));
        }

        if (isToday) dayDiv.classList.add('today');
        if (isSelected) dayDiv.classList.add('selected');

        td.appendChild(dayDiv);
        return td;
    }

    function selectDate(date) {
        selectedDate = date;
        selectedTime = null;
        document.querySelectorAll('.calendar-day').forEach(day => day.classList.remove('selected'));
        document.querySelectorAll('.calendar-day').forEach(day => {
            if (parseInt(day.textContent) === date.getDate() && !day.classList.contains('disabled')) {
                day.classList.add('selected');
            }
        });
        updateTimeSlots();
        checkFormValidity();
    }

    function updateTimeSlots() {
        if (!selectedDate) return;

        const doctorId = document.querySelector('input[name="Appointment.DoctorId"]').value;
        
        fetch(`/Appointment/GetAvailableSlots?doctorId=${doctorId}&date=${selectedDate.toISOString()}`)
            .then(response => response.json())
            .then(data => {
                timeSlots.innerHTML = '';
                
                data.forEach(slot => {
                    const slotDiv = document.createElement('div');
                    slotDiv.className = `time-slot ${!slot.available ? 'disabled' : ''}`;
                    slotDiv.textContent = slot.time;
                    
                    if (slot.available) {
                        slotDiv.addEventListener('click', () => selectTime(slot.time, slotDiv));
                    }
                    
                    if (selectedTime === slot.time) {
                        slotDiv.classList.add('selected');
                    }
                    
                    timeSlots.appendChild(slotDiv);
            });
            })
            .catch(error => {
                console.error('Saat bilgileri alınırken hata oluştu:', error);
            });
    }

    function selectTime(time, element) {
        selectedTime = time;
        document.querySelectorAll('.time-slot').forEach(slot => slot.classList.remove('selected'));
        element.classList.add('selected');
        checkFormValidity();
    }

    function checkFormValidity() {
        submitButton.disabled = !(selectedDate && selectedTime);
    }

    // Ay değiştirme butonları
    document.getElementById('prevMonth').addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        updateCalendar();
            });
            
    document.getElementById('nextMonth').addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        updateCalendar();
    });

    // Başlangıçta takvimi göster
    updateCalendar();
    });
</script>
}