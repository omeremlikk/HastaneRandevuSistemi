// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hastane.Data;

#nullable disable

namespace hastane.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250517141738_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("hastane.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("hastane.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "İç hastalıkları tanı ve tedavisi",
                            ImageUrl = "/img/departments/internal.jpg",
                            Name = "Dahiliye"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Kulak, burun ve boğaz hastalıkları",
                            ImageUrl = "/img/departments/ent.jpg",
                            Name = "KBB"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Kalp ve damar hastalıkları",
                            ImageUrl = "/img/departments/cardiology.jpg",
                            Name = "Kardiyoloji"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cilt hastalıkları tanı ve tedavisi",
                            ImageUrl = "/img/departments/dermatology.jpg",
                            Name = "Dermatoloji"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Göz ve görme ile ilgili hastalıklar",
                            ImageUrl = "/img/departments/ophthalmology.jpg",
                            Name = "Göz Hastalıkları"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Kas ve iskelet sistemi hastalıkları",
                            ImageUrl = "/img/departments/orthopedics.jpg",
                            Name = "Ortopedi"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Sinir sistemi hastalıkları",
                            ImageUrl = "/img/departments/neurology.jpg",
                            Name = "Nöroloji"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Ruh sağlığı ve hastalıkları",
                            ImageUrl = "/img/departments/psychiatry.jpg",
                            Name = "Psikiyatri"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Üriner sistem hastalıkları",
                            ImageUrl = "/img/departments/urology.jpg",
                            Name = "Üroloji"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Kadın üreme sistemi ve gebelik takibi",
                            ImageUrl = "/img/departments/gynecology.jpg",
                            Name = "Kadın Hastalıkları ve Doğum"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Hormon ve metabolizma hastalıkları",
                            ImageUrl = "/img/departments/endocrinology.jpg",
                            Name = "Endokrinoloji"
                        });
                });

            modelBuilder.Entity("hastane.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "İç hastalıkları alanında 12 yıllık deneyime sahip uzman doktor",
                            ImageUrl = "/img/doctors/doctor1.jpg",
                            Name = "Dr. Ahmet Yılmaz",
                            Specialty = "Dahiliye"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Kulak, burun, boğaz hastalıkları konusunda deneyimli uzman",
                            ImageUrl = "/img/doctors/doctor3.jpg",
                            Name = "Dr. Mehmet Kaya",
                            Specialty = "KBB"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Kalp ve damar hastalıkları konusunda 15 yıllık deneyim",
                            ImageUrl = "/img/doctors/doctor2.jpg",
                            Name = "Dr. Ali Öztürk",
                            Specialty = "Kardiyoloji"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cilt hastalıkları ve estetik dermatoloji konusunda uzman",
                            ImageUrl = "/img/doctors/doctor7.jpg",
                            Name = "Dr. Can Yücel",
                            Specialty = "Dermatoloji"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Retina hastalıkları ve çocuk göz sağlığı konusunda uzmanlaşmış göz doktoru",
                            ImageUrl = "/img/doctors/doctor9.jpg",
                            Name = "Dr. Ece Şahin",
                            Specialty = "Göz Hastalıkları"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Eklem hastalıkları ve spor yaralanmaları konusunda uzman ortopedist",
                            ImageUrl = "/img/doctors/doctor11.jpg",
                            Name = "Dr. Gamze Özkan",
                            Specialty = "Ortopedi"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Baş ağrısı ve migren konusunda uzmanlaşmış nörolog",
                            ImageUrl = "/img/doctors/doctor13.jpg",
                            Name = "Dr. İrem Doğan",
                            Specialty = "Nöroloji"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Depresyon ve anksiyete bozuklukları tedavisi konusunda uzman psikiyatrist",
                            ImageUrl = "/img/doctors/doctor15.jpg",
                            Name = "Dr. Kemal Tunç",
                            Specialty = "Psikiyatri"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Prostat hastalıkları ve erkek üreme sağlığı konusunda uzman ürolog",
                            ImageUrl = "/img/doctors/doctor17.jpg",
                            Name = "Dr. Murat Ersoy",
                            Specialty = "Üroloji"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Normal doğum ve riskli gebelik konusunda uzman jinekolog",
                            ImageUrl = "/img/doctors/doctor19.jpg",
                            Name = "Dr. Osman Kara",
                            Specialty = "Kadın Hastalıkları ve Doğum"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Diyabet ve tiroid hastalıkları tedavisi konusunda uzman endokrinolog",
                            ImageUrl = "/img/doctors/doctor21.jpg",
                            Name = "Dr. Rıza Altın",
                            Specialty = "Endokrinoloji"
                        });
                });

            modelBuilder.Entity("hastane.Models.Appointment", b =>
                {
                    b.HasOne("hastane.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("hastane.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
